// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "elo", type: "int" },
      { name: "MatchJson", type: "json" },
      { name: "Stats", type: "json" },
      { name: "file", type: "file" },
    ],
  },
  { name: "Matches", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type Matches = InferredTypes["Matches"];
export type MatchesRecord = Matches & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  Matches: MatchesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Wolfgang-p564tb.us-east-1.xata.sh/db/AlgoArena",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;


import { XATA_API_KEY, XATA_BRANCH, XATA_DATABASE_URL } from '$env/static/private';

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient({
		// Override configuration here
		databaseURL: XATA_DATABASE_URL,
		apiKey: XATA_API_KEY,
		fetch: fetch,
		branch: XATA_BRANCH
		// ... other configuration
	});

	return instance;
};
